<?php

namespace OSMI\Survey\Graph\Test;

use OSMI\Survey\Graph\Response;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-22 at 21:41:42.
 */
class ResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $response;
    protected $question;
    protected $answers;
    protected $totalAnswers;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->question = 'Is this a test question?';
        $this->answers = [
            [
                'answer' => 'Yes',
                'responses' => 100,
            ],
            [
                'answer' => 'No',
                'responses' => 50,
            ],
        ];
        $this->totalAnswers = 150;

        $this->response = new Response($this->question, $this->answers);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->response = null;
    }

    /**
     * @covers OSMI\Survey\Graph\Response::getQuestion
     * @covers OSMI\Survey\Graph\Response::sortAnswers
     * @covers OSMI\Survey\Graph\Response::sumAnswers
     *
     * @uses OSMI\Survey\Graph\Response::__construct
     */
    public function testGetQuestion()
    {
        $this->assertEquals($this->question, $this->response->getQuestion());
    }

    /**
     * @covers OSMI\Survey\Graph\Response::getAnswers
     * @covers OSMI\Survey\Graph\Response::sortAnswers
     * @covers OSMI\Survey\Graph\Response::sumAnswers
     *
     * @uses OSMI\Survey\Graph\Response::__construct
     */
    public function testGetAnswers()
    {
        $this->assertEquals($this->answers, $this->response->getAnswers());
    }

    /**
     * @covers OSMI\Survey\Graph\Response::getTotalAnswers
     *
     * @uses OSMI\Survey\Graph\Response::sortAnswers
     * @uses OSMI\Survey\Graph\Response::sumAnswers
     * @uses OSMI\Survey\Graph\Response::__construct
     */
    public function testGetTotalAnswers()
    {
        $this->assertEquals($this->totalAnswers, $this->response->getTotalAnswers());
    }

    /**
     * @covers OSMI\Survey\Graph\Response::sortAnswers
     *
     * @uses OSMI\Survey\Graph\Response::getAnswers
     * @uses OSMI\Survey\Graph\Response::sumAnswers
     * @uses OSMI\Survey\Graph\Response::__construct
     */
    public function testAnswersAreSortedByResponsesDesc()
    {
        $answers = [
            [
                'answer' => 'Of course!',
                'responses' => 18,
            ],
            [
                'answer' => 'Maybe?',
                'responses' => 18,
            ],
            [
                'answer' => 'Dunno.',
                'responses' => 22,
            ],
        ];

        $response = new Response('Is this a test question?', $answers);
        $this->assertEquals(22, $response->getAnswers()[0]['responses']);
    }

    /**
     * @covers OSMI\Survey\Graph\Response::jsonSerialize
     * @covers OSMI\Survey\Graph\Response::getQuestion
     * @covers OSMI\Survey\Graph\Response::getAnswers
     * @covers OSMI\Survey\Graph\Response::getTotalAnswers
     *
     * @uses OSMI\Survey\Graph\Response::sortAnswers
     * @uses OSMI\Survey\Graph\Response::sumAnswers
     * @uses OSMI\Survey\Graph\Response::__construct
     */
    public function testJsonSerialize()
    {
        $jsonSerializable = [
            'question' => $this->question,
            'answers' => $this->answers,
            'totalAnswers' => $this->totalAnswers,
        ];

        $this->assertEquals($jsonSerializable, $this->response->jsonSerialize());
    }
}
