<?php

namespace OSMI\Survey\Graph\Test\Repository;

use OSMI\Survey\Graph\Repository\JsonImport;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-22 at 22:31:07.
 */
class JsonImportTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var JsonImport
     */
    protected $repository;
    protected $client;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->client = $this->getMockBuilder('GraphAware\Neo4j\Client\Client')
            ->disableOriginalConstructor()
            ->getMock();

        $this->stack = $this->getMockBuilder('GraphAware\Neo4j\Client\Stack')
            ->disableOriginalConstructor()
            ->getMock();

        $this->repository = new JsonImport($this->client);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->repository = null;
    }

    /**
     * @covers OSMI\Survey\Graph\Repository\JsonImport::import
     * @covers OSMI\Survey\Graph\Repository\JsonImport::processQuestions
     * @covers OSMI\Survey\Graph\Repository\JsonImport::processResponses
     * @covers OSMI\Survey\Graph\Repository\JsonImport::processMetadata
     * @covers OSMI\Survey\Graph\Repository\JsonImport::getCreateGroup
     * @covers OSMI\Survey\Graph\Repository\JsonImport::getCreateQuestion
     * @covers OSMI\Survey\Graph\Repository\JsonImport::getCreatePerson
     * @covers OSMI\Survey\Graph\Repository\JsonImport::getCreateAnswer
     *
     * @uses OSMI\Survey\Graph\Repository\JsonImport::__construct
     *
     * @todo   Implement testImport().
     */
    public function testImport()
    {
        $data = [
            'questions' => [
                [
                    'id' => 'statement_abcd',
                    'question' => 'This is a statement.',
                    'field_id' => 1234,
                ],
                [
                    'id' => 'group_18065393',
                    'question' => 'Group Name',
                    'field_id' => 5678,
                ],
                [
                    'id' => 'yesno_18065319',
                    'question' => 'Are you self-employed?',
                    'field_id' => 18065319,
                    'group' => 'group_18065393',
                    'order' => 0,
                ],
                [
                    'id' => 'yesno_18065487',
                    'question' => 'Is your employer primarily a tech company/organization?',
                    'field_id' => 18065487,
                    'group' => null,
                    'order' => 1,
                ],
            ],
            'responses' => [
                [
                    'completed' => '1',
                    'token' => 'dce88ed56f0fdb44b48e4d02a151fbe5',
                    'metadata' => [
                        'browser' => 'default',
                        'platform' => 'other',
                        'date_land' => '2016-03-31 19:49:53',
                        'date_submit' => '2016-03-31 19:55:51',
                        'user_agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36',
                        'referer' => '',
                        'network_id' => '91e603b3cc5bd1ff25c5aee437fc647e2ca7f079',
                    ],
                    'answers' => [
                        'yesno_18065319' => '',
                        'list_18065482_choice' => '100-500',
                        'yesno_18065487' => '1',
                    ],
                ],
            ],
        ];

        $personExpected = [
            'token' => 'dce88ed56f0fdb44b48e4d02a151fbe5',
            'props' => [
                'browser' => 'default',
                'platform' => 'other',
                'date_land' => 1459453793000,
                'date_submit' => 1459454151000,
                'user_agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36',
                'referer' => null,
                'network_id' => '91e603b3cc5bd1ff25c5aee437fc647e2ca7f079',
            ],
        ];

        $answersExpected = [
            [
                'hash' => md5('list_18065482_choice' . '100-500'),
                'answer' => '100-500',
                'token' => 'dce88ed56f0fdb44b48e4d02a151fbe5',
                'questionId' => 'list_18065482_choice',
            ],
            [
                'hash' => md5('yesno_18065487' . '1'),
                'answer' => '1',
                'token' => 'dce88ed56f0fdb44b48e4d02a151fbe5',
                'questionId' => 'yesno_18065487',
            ],
        ];

        $this->client->expects($this->once())
            ->method('stack')
            ->will($this->returnValue($this->stack));

        $this->client->expects($this->once())
            ->method('runStack')
            ->with($this->stack);

        $this->stack->expects($this->exactly(4))
            ->method('push')
            ->withConsecutive(
                [
                    $this->repository->getCreateGroup(),
                    ['params' => [$data['questions'][1]]],
                ],
                [
                    $this->repository->getCreateQuestion(),
                    ['params' => [$data['questions'][2], $data['questions'][3]]],
                ],
                [
                    $this->repository->getCreatePerson(),
                    ['params' => [$personExpected]],
                ],
                [
                    $this->repository->getCreateAnswer(),
                    ['params' => $answersExpected],
                ]
            );

        unset($data['questions'][3]['group']);

        $this->repository->import($data);
    }
}
